import asyncio
import logging
from typing import List

from src.core.settings import settings
from src.parsers.start_page import StartPageParser
from src.parsers.category import CategoryParser
from src.parsers.product_feature import KomusParser
from src.repository.mongo_client import mongo_client
from src.repository.repository import ProductRepository
from src.services.state_manager import ParserStateManager, ParserState

logger = logging.getLogger(__name__)


class KomusParserService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ Komus —Å –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π –Ω–∞ httpx + API"""

    def __init__(self):
        self.start_page_parser = StartPageParser()
        self.category_parser = CategoryParser()
        self.limit_products = None
        self.total_products_processed = 0
        self.state_manager = ParserStateManager(use_mongodb=True)
        self.state = None
        self.save_state_interval = 5  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    async def __aenter__(self):
        await mongo_client.connect()
        self.product_repository = ProductRepository()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await mongo_client.disconnect()

    async def run_parsing(self, limit_categories: int = None, limit_products: int = None, resume: bool = True):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π –Ω–∞ httpx + API"""
        logger.info("Starting Komus parsing with full httpx + API migration")
        logger.info("üöÄ Using API for product parsing - faster and more reliable!")

        self.limit_products = limit_products

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if resume:
            saved_state = await self.state_manager.load_state()
            if saved_state:
                self.state = ParserState.from_dict(saved_state)
                self.total_products_processed = self.state.total_products_processed

                logger.info("Found saved state:")
                logger.info(f"  - Processed categories: {self.state.total_categories_processed}")
                logger.info(f"  - Processed products: {self.state.total_products_processed}")
                logger.info(f"  - Started: {self.state.start_time}")

                # 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
                logger.info("Resuming in 5 seconds...")
                await asyncio.sleep(5)
                logger.info("Resuming parsing...")
            else:
                logger.info("Starting new parsing session")
                self.state = ParserState()
        else:
            self.state = ParserState()

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ httpx + API - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            processed_categories = await self.start_page_parser.parse_and_process(
                self._process_category,
                limit_categories,
                self.state
            )

            logger.info("Parsing completed successfully")
            logger.info(f"Processed categories: {processed_categories}")
            logger.info(f"Processed products: {self.total_products_processed}")

            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self.state_manager.clear_state()
            logger.info("State cleared")

        except KeyboardInterrupt:
            logger.warning("Parsing interrupted by user")
            await self._save_current_state()
            logger.info("State saved")
            raise
        except Exception as e:
            logger.error(f"Critical error: {e}")
            await self._save_current_state()
            logger.info("State saved")
            raise

    async def _process_category(self, category_url: str, category_number: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        logger.info(f"Processing category #{category_number}: {category_url}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ httpx
            product_links = await self.category_parser.parse_page(category_url)

            if self.limit_products:
                product_links = product_links[:self.limit_products]

            if not product_links:
                logger.warning("No products found in category")
                return

            logger.info(f"Found products: {len(product_links)}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ API (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±)
            await self._process_products_via_api(product_links)

            self.total_products_processed += len(product_links)
            self.state.total_products_processed = self.total_products_processed

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if category_number % self.save_state_interval == 0:
                await self._save_current_state()

        except Exception as e:
            logger.error(f"Error processing category: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await self._save_current_state()

    async def _process_products_via_api(self, product_links: List[str]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)"""
        logger.info(f"Processing {len(product_links)} products via API")

        for i, product_url in enumerate(product_links, 1):
            try:
                logger.info(f"Processing product {i}/{len(product_links)}: {product_url}")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL
                product_id = self._extract_product_id_from_url(product_url)

                if not product_id:
                    logger.warning(f"Could not extract product ID from URL: {product_url}")
                    continue

                # –°–æ–∑–¥–∞–µ–º API –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                product_parser = KomusParser(product_id=product_id, product_url=product_url)

                # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ API (–Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ HTML)
                product = await product_parser.parse_page()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞
                if product.title == "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" or product.title.startswith("–û—à–∏–±–∫–∞"):
                    logger.warning(f"Failed to parse product {product_id}: {product.title}")
                    continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
                await self.product_repository.save_product(product)

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ (API –º–æ–∂–µ—Ç –≤—ã–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É)
                await asyncio.sleep(0.5)  # –£–º–µ–Ω—å—à–µ–Ω–∞ —Å 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è API

            except Exception as e:
                logger.error(f"Error processing product {i} ({product_url}): {e}")
                continue

    def _extract_product_id_from_url(self, url: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL"""
        import re
        match = re.search(r'/p/(\d+)/', url)
        return match.group(1) if match else ""

    async def _save_current_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        await self.state_manager.save_state(self.state.to_dict())
        logger.info(
            f"State saved (categories: {self.state.total_categories_processed}, products: {self.state.total_products_processed})")