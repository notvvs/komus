import asyncio
import logging
from typing import Dict, Optional
from datetime import datetime, timedelta
import threading

from src.utils.http_requests import refresh_session_on_503

logger = logging.getLogger(__name__)


class SessionManager:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è cookies –∏ headers"""

    _instance = None
    _lock = threading.Lock()

    def __new__(cls):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(SessionManager, cls).__new__(cls)
        return cls._instance

    def __init__(self):
        if not hasattr(self, 'initialized'):
            self.session_data: Optional[Dict] = None
            self.session_created_at: Optional[datetime] = None
            self.session_refresh_in_progress = False
            self.session_lock = asyncio.Lock()
            self.max_session_age = timedelta(hours=2)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏
            self.initialized = True

    async def get_session(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        async with self.session_lock:
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            if self._should_refresh_session():
                logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...")
                await self._refresh_session()

            return self.session_data

    async def refresh_session_on_error(self) -> Dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        async with self.session_lock:
            if self.session_refresh_in_progress:
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
                # –ñ–¥–µ–º –ø–æ–∫–∞ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–∏—Ç —Å–µ—Å—Å–∏—é
                while self.session_refresh_in_progress:
                    await asyncio.sleep(0.1)
                return self.session_data

            logger.warning("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...")
            await self._refresh_session()
            return self.session_data

    def _should_refresh_session(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        if self.session_data is None:
            return True

        if self.session_created_at is None:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏
        if datetime.now() - self.session_created_at > self.max_session_age:
            logger.info("‚è∞ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return True

        return False

    async def _refresh_session(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        try:
            self.session_refresh_in_progress = True

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            new_session_data = await refresh_session_on_503()

            if new_session_data:
                self.session_data = new_session_data
                self.session_created_at = datetime.now()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        finally:
            self.session_refresh_in_progress = False

    def get_session_info(self) -> Dict:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        if not self.session_data:
            return {"status": "no_session"}

        age = datetime.now() - self.session_created_at if self.session_created_at else None

        return {
            "status": "active",
            "created_at": self.session_created_at.isoformat() if self.session_created_at else None,
            "age_minutes": age.total_seconds() / 60 if age else None,
            "cookies_count": len(self.session_data.get('cookies', {})),
            "headers_count": len(self.session_data.get('headers', {}))
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
session_manager = SessionManager()